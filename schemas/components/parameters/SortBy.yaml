in: query
name: sortBy
description: |
  # 정렬 기준

  결과 배열의 정렬 기준을 설정합니다.

  ## 종류

  각 정렬 옵션은 상호 배제적입니다. \
  즉, 한번에 하나의 정렬 기준만 설정할 수 있습니다.

  또한 언제 어디서 조회를 하든 반드시 하나의 정렬 기준이 주어져야 합니다. \
  만약 `sortBy` 파라미터를 생략한다면, 기본값을 사용해서 정렬합니다.

  | 종류 | 속성 값 | 설명 |
  | --- | --- | --- |
  | 시간순 정렬 | `date` | 시간순(최신순)으로 정렬합니다. *기본값입니다. |
  | 거리순 정렬 | `location` | 현재 위치로부터 가까운 순으로 정렬합니다. |
  | 정확도순 | `search` | 검색어에 대한 정확도순으로 정렬합니다. |

  ### 시간순 정렬

  해당 정렬을 위해서 어떠한 다른 파라미터도 필요하지 않습니다.

  현재까지는 시간 범위 검색(x월 y일 중 올라온 글 검색, 특정 날보다 이전 글 검색 등)을 지원하지 않습니다.

  ### 거리 정렬

  `Post` 데이터의 `location` 속성을 비교해 가며 결과들을 현재 위치와의 거리순으로 정렬합니다. \
  `location` 속성은 있을수도 있고 없을수도 있기 때문에, 해당 검색 중에는 `location` 값이 없는 글은 모조리 무시됩니다.

  이 정렬을 사용하기 위해서는 반드시 `location` 파라미터에 현재 위치를 지정해야 합니다.

  #### Post의 `location`과의 차이

  **주의: `Post` 스키마의 `location` 속성과 이 엔드포인트의 `location` 파라미터는 다릅니다.**

  쉽게 설명하자면 스키마에 있는 `location` 은 실제 DB에 저장되는 내용이며,
  글을 생성할 때, 수정할 때, 조회할 때 결과나 입력으로 나타납니다.

  반면에 해당 요청(`GET /posts`)의 `location` 파라미터는 URL에 선택적으로 들어가는 `검색 조건` 이며,
  거리 정렬을 할 때 현재 자신(사용자)의 위치를 서버에 전달하는 데 사용합니다.

  이 값이 전달되면 서버는 `location` 파라미터로 전달받은 유저의 현재 위치와 가장 가까운
  `location` 을 가진 `Post` 를 찾아 건네준다고 생각하면 좋습니다.

  #### 기능 구현

  거리 정렬은 '(웹)앱 사용자의 주변에서 발생한 생태계 교란종에 대한 정보'
  를 시각화해서 전달하는 기능에 특별히 유용합니다.

  각각의 글들을 위치별로 정리해서 지도 형태로 보여주거나
  가까운 지역에서 교란종이 발생하면 알림을 주는 등의 기능을 구현하는 데 사용할 수 있습니다.

  자세한 내용은 `Post` 스키마의 `location` 필드에 적힌 내용을 참고하세요.

  ### 정확도순 정렬

  이 정렬을 사용하기 위해서는 반드시 `search` 파라미터에 검색할 텍스트를 입력해야 합니다.

  주어진 텍스트로 검색을 한 후 `text` 인덱스에 맞게 가장 검색어에 가까운 결과순으로 정렬되어 보내집니다.

  ## 제한

  현재 정렬은 낮은 우선순위의 정렬 기준을 제공하지 않습니다. \
  (한번의 조회에 단 하나의 정렬 기준만 사용할 수 있습니다)

  예를 들어 `date`를 기준으로 하는 경우 '정확히 같은 날의 정화히 같은 시간에 올라온' \
  두 개 이상의 글이 존재하는 경우, 그 글들끼리의 정렬 순서를 보장하지 않습니다.
schema:
  type: string
  enum:
    - date
    - location
  default: date
