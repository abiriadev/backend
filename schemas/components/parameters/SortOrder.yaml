in: query
name: sortOrder
description: |
  # 정렬 순서

  정렬 순서를 결정합니다.

  ## 종류

  순서 옵션은 `오름차순`과 `내림차순` 두 가지가 존재합니다.

   - `asc`: 오름차순으로 정렬.
   - `desc`: 내림차순으로 정렬. *기본값입니다.

  현재까지는 무작위로 정렬(샘플링)하는 기능이 없으며, 구현할 계획 또한 없습니다.

  정렬 자체를 무시하고 싶어도 현재 API 명세상 불가능합니다. \
  `sortBy` 옵션과 이 파라미터를 둘다 생략해도 기본값인 `date-desc`로 정렬되어 전달됩니다.

  독자적인 기준의 정렬을 구현하고 싶다면 프런트엔드/앱 단에서 구현이 필요합니다.

  ## 정렬 기준별 동작 차이

  | 정렬 기준 | 오름차순 동작 | 내림차순 동작| 설명 |
  | --- | --- | --- | --- |
  | `date` | 가장 오래된 글부터 시작 | 가장 최신 글부터 시작 | `Date`의 비교는 `timestamp`화한 후 진행되기 때문에 `1134313200000`(2005년)은 `1661832502025`(2022년)보다 '낮다고' 평가됩니다. |
  | `location` | 현재 위치에서 가장 가까운 곳부터 시작 | 현재 위치에서 가장 먼 곳부터 시작 | `location`의 비교는 현재 지역부터 대상 지점까지의 `거리`를 기준으로 정렬하기 때문에 가까운 장소가 먼 장소보다 '낮다고' 평가됩니다. |
  | `search` | 가장 정확도가 낮은 검색결과부터 시작 | 가장 정확도가 높은 검색결과부터 시작 | 딱히 이유는 없고 그저 predefined된 동작입니다. |

  예를 들어 가장 최신글부터 보여주고 싶다면 `sortBy=date&sortOrder=desc`를, \
  가장 가까운 곳부터 보여주고 싶다면 `sortBy=location&sortOrder=asc`를 사용할 수 있습니다.

  전자의 경우, `sortBy`는 `date`가 기본값이고 `sortOrder`는 `desc`가 기본값이므로
  둘다 생략해도 동일하게 작동합니다.
schema:
  type: string
  enum:
    - asc
    - desc
  example: asc
  default: desc
