type: object
description: |
  # 에러

  에러 객체입니다.

  ## 주의

  '일반적으로' 발생 가능한 모든 에러들은 대부분 응답의 상태 코드로 구분됩니다. \
  반면에 이 객체는 서버 내부 에러, 가동 불가, 파일시스템 접근 거부 등
  완전히 예측 불가능한 값들마저 전달할 수 있습니다.

  다만 상태 코드만으로는 모든 종류의 에러를 표현할 수 없기에, 다양한 경우를 위해 해당 객체를 사용합니다.

  기본적으로 문제가 발생했을 경우 서버의 가장 뒤쪽에 위치한 에러 처리 미들웨어가 최후의 수단으로 이 에러를 전송합니다.

  ### 해당 객체의 파싱

  해당 객체는 가능한 한 일반적인 형태를 띄고 있지만, 그 안에 담긴 의미는 일괄적으로 파싱이 불가능합니다.

  따라서 가급적 이 객체를 직접 파싱하지 말아주세요.

  만약 클라이언트에서 에러 처리를 구현해야 한다면, 우선 HTTTP Status Code를 확인해 주세요.

  만약 Status Code 가 200이나 201이 아닌 다른 값(특히나 400~500번대)이라면,
  그때는 응답으로 온 값이 100% 에러 객체임을 안심하고 파싱하셔도 좋습니다.
properties:
  status:
    type: integer
    description: |
      `HTTP` 상태 코드를 전달합니다.

      **참고: 모든 api응답은 적절한 상태 코드를 반환합니다.**

      이 값을 직접 읽기보단 전달받은 http 상태 코드를 직접 읽어주세요.

      해당 필드를 기계적으로 파싱해도 문제가 되지 않습니다.
    example: 400
    enum:
      - 400
      - 401
      - 403
      - 404
      - 500
  errorName:
    type: string
    description: |
      해당 에러의 종류를 나타내는 고유하고 일관적인 문자열입니다.

      예를 들어, 요청받은 글을 찾을 수 없다면 `PageNotFound` 에러를 발생시킵니다.

      해당 필드를 기계적으로 파싱해도 문제가 되지 않습니다.
    example: 'FieldRequired'
  action:
    type: string
    description: |
      해당 에러가 발생한 동작의 위치를 의미합니다.

      예를 들어 `action`이 `getPost`였다면 특정 글을 불러오던 중 에러가 발생했음을 알 수 있습니다.

      해당 필드를 기계적으로 파싱해도 문제가 되지 않습니다.
    example: 'createdPost'
  message:
    type: string
    description: |
      에러를 설명하는 '사람이 읽도록 만들어진' 에러 메세지입니다.

      **해당 메세지를 기계적으로 파싱하지 마세요.**
    example: field `title` required',
required:
  - status
  - errorName
  - action
  - message
