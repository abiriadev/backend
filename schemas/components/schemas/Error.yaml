type: object
description: |
  # 에러

  에러 객체입니다.

  ## 주의

  **해당 객체를 직접 읽어들여서 에러 내용을 파악하려고 하지 마세요!**

  '일반적으로' 발생 가능한 모든 에러들은 응답의 상태 코드로 구분됩니다. \
  반면에 이 객체는 서버 내부 에러, 가동 불가, 파일시스템 접근 거부 등
  완전히 예측 불가능한 값들마저 전달할 수 있습니다.

  기본적으로 서버의 가장 뒤쪽에 위치한 에러 처리 미들웨어가 최후의 수단으로 이 에러를 전송합니다.

  ## 일반 HTTP코드 전송

  Error객체는 일반적인 에러를 표현하기도 하는 범용적인 객체입니다. \
  (다만 그렇기 때문에 매번 값이 달라져 일관적인 파싱을 불가능하게 만듭니다)

  HTTP코드로 표현 가능한 에러를 표현하는 해당 객체의 자식 클래스로 `HttpError` 스키마가 있습니다.
properties:
  errorCode:
    type: integer
    description: |
      에러를 구분하는 정수 번호.

      하지만 반드시 같은 에러임을 보장하지는 않으며,
      임의로 전달될 수 있습니다.
    example: 123
  message:
    type: string
    description: |
      에러를 설명하는 '사람이 읽도록 만들어진' 에러 메세지입니다.

      해당 메세지를 기계적으로 파싱하지 마세요.
  additionalData:
    description: |
      에러 종류에 따라 달라지는 임의의 타입.

      예를 들어 (배포용이 아닌) 서버 내부의 에러인 경우 StStacktrace가 나올 수도 있으며, \
      오류가 난 위치나 이유, 관련된 객체의 값, 현재 시간, 로깅 정보 등등
      항상 예측 불가능한 값이 응답으로 올 수 있습니다. \
      따라서 이 값은 파싱하기 보다는 사람이 읽고서 판단하는 것이 유용합니다.
    nullable: true
    example: '<어떤 에러 종류냐에 따라 달라지는 Stacktrace, Log등 임의의 에러 정보>'
